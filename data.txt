CHARIZARD

HP : 360
ATK : 293
SP.ATK : 348
DEF : 280
SP.DEF : 295
SPEED : 328

MOVES

Flamethrower (POWER: 95) - SPECIAL
Fire Blast (POWER: 120) - SPECIAL
Fly (POWER: 70) - FÍSICO
Earthquake (POWER: 100) - FÍSICO 

PIKACHU
HP :274
ATK : 229
SP.ATK :218 
DEF : 196
SP.DEF : 218
SPEED : 306

MOVES
Quick Attack - SEMPRE VAI PRIMEIRO (POWER: 40) - FÍSICO
Thunderbolt (POWER: 95) - SPECIAL
Thunder (POWER: 120) - SPECIAL
Skull Bash (POWER: 100) - FÍSICO

DRAGONITE
HP : 386
ATK : 403
SP.ATK : 328 
DEF : 317
SP.DEF : 328
SPEED : 284

MOVES
Fly (POWER: 70) - FÍSICO
Earthquake (POWER: 100) - FÍSICO 
Ice Beam (POWER: 95) - SPECIAL
Fire Blast (POWER: 120) - SPECIAL

VAPOREON
HP : 464
ATK : 251
SP.ATK : 350 
DEF : 240
SP.DEF : 317
SPEED : 251

MOVES
Hydro Pump (POWER: 120) - SPECIAL
Aurora Beam (POWER: 65) - SPECIAL
Quick Atack - SEMPRE VAI PRIMEIRO (POWER: 40) - FÍSICO
Blizzard (POWER: 120) - SPECIAL


	//moves ---- devem ser const para que possam ser usados no switch
	
	//charizard 
		
	const int flamethrower = 1; //special
	const int fire_blast = 2; //s
	const int fly = 3; //fisico
	const int earthquake = 4; //f
	
	//pikachu
	
	const int quick_attack = 5; //f
	const int thunderbolt = 6; //s
	const int thunder = 7; //s
	const int skull_bash = 8; //f
	
	//dragonite
	
	const int ice_beam = 9; //s
	
	//vaporeon
	
	const int hydro_pump = 10; //s
	const int aurora_beam = 11; //s
	const int blizzard = 12; //s
	
	
	
	
	
//dano = (((((2*100)/5) + 2) * power_move * (fez_atk->sp_atk/rec_atk->sp_def))/50)+2;
		
//dano = ((42 * power_move * (fez_atk->sp_atk/rec_atk->sp_def)) / 50) + 2;

//dano = ((42 * power_move * (fez_atk->atk/rec_atk->def)) / 50) + 2;

fluxo

> Menus
> Batalha começa
> CPU lança um pokémon aleatório
> Pergunta qual pokémon tu quer usar do teu time
> Teu Pokémon entra
> Escolhe o ataque
> Compara velocidades
> Mais rápido ataca primeiro
> Se matar, o que perdeu troca, se não, tu recebe o ataque
> Se morrer, tu tem que trocar, mas quem atacou permanece
> Pokémon que perde não pode mais ser usado, como se fosse um "destroy / remove"
> Ganha quem eliminar os pokémons do outro
		
void RemoveLista(TipoLista *L, TipoChave C) {	
	TipoApontador P = PesquisaLista(L, C);	
	int r = RemoveListaPosicao(L, P);
	if (r != POSICAOINVALIDA)
		printf("Removeu elemento\n");
	else
		printf("Remocao deu ruim\n");
}

int static RemoveListaPosicao(TipoLista *L, TipoApontador P) {

	if (P == NAO_ENCONTRADO)
		return POSICAOINVALIDA;

	// unico elemento na lista
	if (P == L->Primeiro && L->Primeiro == L->Ultimo) {
		L->Primeiro = NULL;
		L->Ultimo = NULL;
		free(P);
		return SEMERRO;
	}
	
	// Remove do inicio
	if (P == L->Primeiro) {
		L->Primeiro = L->Primeiro->prox;
		free(P);
		return SEMERRO;
	}
	
	// Remove no meio da lista
	TipoApontador aux = L->Primeiro;
	while(aux->prox != NULL && aux->prox != P) {
		aux = aux->prox;
	}
	
	aux->prox = P->prox;
	// se o removido estava no fim
	if (aux->prox == NULL)
		L->Ultimo = aux;
	
	free(P);
	
	return SEMERRO;
	
}
		
